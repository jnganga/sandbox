{
	"AWSTemplateFormatVersion": "2010-09-09",

	"Description": "Setup a VPC + EC2 instance that runs wordpress. CloudFormation template based upon https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_single_instance_in_subnet.template",

	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t1.micro",
				"t2.nano",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m1.small",
				"m1.medium",
				"m1.large",
				"m1.xlarge",
				"m2.xlarge",
				"m2.2xlarge",
				"m2.4xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"SSHLocation": {
			"Description": "The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
		"DBName": {
			"Default": "wordpressdb",
			"Description": "The WordPress database name",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"EC2UserName": {
			"NoEcho": "true",
			"Description": "This is also WordPress database admin account username",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"EC2UserPassword": {
			"NoEcho": "true",
			"Description": "This is also WordPress database admin account password",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},
		"DBRootPassword": {
			"NoEcho": "true",
			"Description": "MySQL root password",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		}
	},
	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"AMI": "ami-f4cc1de2"
			},
			"us-east-2": {
				"AMI": "ami-fcc19b99"
			},
			"us-west-1": {
				"AMI": "ami-16efb076"
			},
			"us-west-2": {
				"AMI": "ami-a58d0dc5"
			}

		}
	},

	"Resources": {

		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"Subnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": "10.0.0.0/24",
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},

		"RouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"Route": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "AttachGateway",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},

		"SubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "Subnet"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			}
		},

		"NetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [{
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}]
			}
		},

		"InboundHTTPNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},

		"InboundSSHNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},

		"InboundResponsePortsNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},

		"OutBoundHTTPNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "100",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},

		"OutBoundHTTPSNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "101",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "443",
					"To": "443"
				}
			}
		},

		"OutBoundResponsePortsNetworkAclEntry": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "102",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},

		"SubnetNetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "Subnet"
				},
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				}
			}
		},

		"InstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},

		"WebServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "AMI"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Ref": "AWS::StackName"
					}
				}, {
					"Key": "Application",
					"Value": {
						"Ref": "AWS::StackId"
					}
				}],
				"NetworkInterfaces": [{
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{
						"Ref": "InstanceSecurityGroup"
					}],
					"SubnetId": {
						"Ref": "Subnet"
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash -e\n",
								"useradd '", {
									"Ref": "EC2UserName"
								}, "'\n",

								"echo '", {
									"Ref": "EC2UserName"
								}, "':'", {
									"Ref": "EC2UserPassword"
								}, "'| /usr/sbin/chpasswd\n",


								"apt-get update && apt-get install -y heat-cfntools\n",
								"apt-get -y install software-properties-common awscli\n",
								"apt-get install -y git\n",
								"apt-get install -y ansible\n",
								"echo localhost >> /etc/ansible/hosts\n",
								"cd /tmp && git clone https://github.com/sriramgaddipati/UbuntuAnsible.git\n",

								"echo 'wp_mysql_db: ", {
									"Ref": "DBName"
								}, "' >> /tmp/UbuntuAnsible/roles/mysql/defaults/main.yml\n",
								"echo 'wp_mysql_user: ", {
									"Ref": "EC2UserName"
								}, "' >> /tmp/UbuntuAnsible/roles/mysql/defaults/main.yml\n",
								"echo 'wp_mysql_password: ", {
									"Ref": "EC2UserPassword"
								}, "' >> /tmp/UbuntuAnsible/roles/mysql/defaults/main.yml\n",

								"cd /tmp/UbuntuAnsible && ansible-playbook playbook.yml\n",
								"/usr/bin/cfn-signal -e 0 -r \"WebServer setup complete\" '", {
									"Ref": "WaitHandle"
								}, "'\n"
							]
						]
					}
				}
			}
		},

		"WaitHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle"
		},

		"WaitCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"DependsOn": "WebServerInstance",
			"Properties": {
				"Handle": {
					"Ref": "WaitHandle"
				},
				"Timeout": "500"
			}
		}
	},
	"Outputs": {
		"WebsiteURL": {
			"Value": {
				"Fn::Join": ["", ["http://", {
					"Fn::GetAtt": ["WebServerInstance", "PublicIp"]
				}, "/"]]
			},
			"Description": "URL of WebServer site"
		}
	}
}